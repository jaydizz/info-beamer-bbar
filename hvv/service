#!/usr/bin/python
import re
import os
import time
import json
import pytz
import datetime
import httplib
from calendar import timegm
import xml.etree.ElementTree as ET
from itertools import islice

MET = pytz.timezone("Europe/Berlin")

def efa_fetch(path):
    # from hashlib import md5
    # cache = md5(path).hexdigest()
    # if os.path.exists(cache):
    #     return file(cache, "rb").read()
    conn = httplib.HTTPConnection("mobil.efa.de", 80)
    conn.request("GET", path)
    res = conn.getresponse()
    data = res.read()
    # with file(cache, "wb") as f:
    #     f.write(data)
    return data

def parse(data, stop):
    req = ET.fromstring(data).find('itdDepartureMonitorRequest')

    def parse_date(node):
        dt = node.find('itdDateTime')
        date = dt.find('itdDate')
        time = dt.find('itdTime')
        dt = datetime.datetime(int(date.get('year')), int(date.get('month')), int(date.get('day')),
                                 int(time.get('hour')), int(time.get('minute')))
        dt2 = dt.replace(tzinfo=MET)
        dt2 = dt2.astimezone(pytz.utc)
        dt2 = dt2.replace(tzinfo=None)
        timestamp = int(timegm(dt2.timetuple()))
        return dt, timestamp

    types = dict(
        (e.get('value'), e.text) 
        for e in req.find('itdTripOptions').find('itdPtOptions').find('excludedMeans').findall('meansElem')
    )

    departures = []
    for dep in req.find('itdDepartureList').findall('itdDeparture'):
        date, ts = parse_date(dep)

        line = dep.find('itdServingLine')
        symbol = line.get('symbol')
        type = types[line.get('motType')]

        if type == 'Zug' and re.match('^S[0-9]+$', symbol):
            print "ignoring S-Bahn"
            continue

        if type == 'Zug' and re.match('^[0-9]+$', symbol):
            type = 'Stadtbus'

        if type == 'Zug' and re.match('^U[0-9]+$', symbol):
            type = 'U-Bahn'
        
        if type == 'Zug':
            icon = 'zug'
        else:
            icon = (type + re.match('^([^ ]+).*', symbol).group(1)).lower()
        icon = "hvv-icon-" + icon
        if not os.path.exists("../" + icon + ".png"):
            print("icon not found: %r" % (icon,))
            continue

        direction = line.get('direction')
        # direction = direction.replace('Hamburg', 'HH')
        if direction.startswith('Hamburg, '):
            direction = direction[9:]
        if direction.startswith('Hamburg-'):
            direction = direction[8:]

        if type == 'Zug':
            more = re.match("([a-z]+ [0-9]+) .*", symbol, re.I).group(1)
        else:
            more = ""

        departures.append(((date, direction), dict(
            symbol = symbol,
            platform = dep.get('platformName'),
            date = ts,
            direction = direction,
            type = type,
            nice_date = date.strftime('%H:%M'),
            icon = icon,
            more = more,
            stop = stop,
        )))
    return departures

def get_schedule():
    departures = []
    departures.extend(parse(
        efa_fetch("/mobile3/XSLT_DM_REQUEST?outputFormat=XML&useAllStops=1&useRealtime=1&maxAssignedStops=1&itOptionsActive=1&trITMOTvalue100=5&itdLPxx_dest=&sessionID=0&language=de&locationServerActive=1&mode=direct&limit=60&itdLPxx_script=true&name_dm=28511951&type_dm=stopID&placeInfo_dm=Hamburg"),
        "Dammtor"
    ))
    departures.extend(parse(
        efa_fetch("/mobile3/XSLT_DM_REQUEST?outputFormat=XML&useAllStops=1&useRealtime=1&maxAssignedStops=1&itOptionsActive=1&trITMOTvalue100=5&itdLPxx_dest=&sessionID=0&language=de&locationServerActive=1&mode=direct&limit=60&itdLPxx_script=true&name_dm=28511901&type_dm=stopID&placeInfo_dm=Hamburg"),
        "Stephansplatz"
    ))

    departures.sort()
    departures = [info for sort_key, info in departures]

    # find next run
    for n, dep in enumerate(departures):
        for follow in islice(departures, n+1, None):
            if dep['direction'] == follow['direction'] and \
                    dep['type'] == follow['type'] and \
                    dep['stop'] == follow['stop'] and \
                    dep['symbol'] == follow['symbol']:
                dep['next_date'] = follow['date']
                dep['next_nice_date'] = follow['nice_date']
                break

    # find duplicates
    for n, dep in enumerate(departures):
        for follow in islice(departures, n+1, None):
            if dep['direction'] == follow['direction'] and \
                    dep['type'] == follow['type'] and \
                    dep['stop'] != follow['stop'] and \
                    dep['symbol'] == follow['symbol'] and \
                    abs(dep['date'] - follow['date']) < 5 * 60:
                # print "duplicate:"
                # print dep
                # print follow
                # print
                dep['duplicate'] = True
                break

    def clean(departure):
        del departure['symbol']
        del departure['type']
        return departure

    departures = [clean(dep) for dep in departures if not 'duplicate' in dep]

    from pprint import pprint
    # pprint(departures, width=300)
    
    return json.dumps(departures,ensure_ascii=False).encode("utf8")

def update():
    with file("../hvv.json", "wb") as f:
        f.write(get_schedule())

def main():
    while 1:
        update()
        time.sleep(180)

if __name__ == "__main__":
    main()
